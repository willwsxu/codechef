As you might know, cooking is not an easy job at all and cooking everyday makes the chef very tired. So, Chef has decided to give himself some days off.

Chef has made a schedule for the next N days: On i-th day if Ai is equal to 1 then Chef is going to cook a delicious dish on that day, if Ai is equal to 0 then Chef is going to rest on that day.

After Chef made his schedule he discovered that it's not the best schedule, because there are some big blocks of consecutive days where Chef will cook which means it's still tiring for Chef, and some big blocks of consecutive days where Chef is going to rest which means chef will be bored doing nothing during these days.

Which is why Chef has decided to make changes to this schedule, but since he doesn't want to change it a lot, he will flip the status of at most K days. So for each day which Chef chooses, he will make it 1 if it was 0 or he will make it 0 if it was 1.

Help Chef by writing a program which flips the status of at most K days so that the size of the maximum consecutive block of days of the same status is minimized.

Input
The first line of the input contains an integer T denoting the number of test cases.

The first line of each test case contains two integers: N denoting the number of days and K denoting maximum number of days to change.

The second line contains a string of length N , of which the i-th character is 0 if chef is going to rest on that day, or 1 if chef is going to work on that day

Output
For each test case, output a single line containing a single integer, which is the minimum possible size of maximum block of consecutive days of the same status achievable.

Constraints
1 ≤ T ≤ 11,000
1 ≤ N ≤ 10^6
The sum of N in all test-cases won't exceed 10^6.
0 ≤ K ≤ 10^6
0 ≤ Ai ≤ 1
Subtasks
Subtask #1 (20 points): N ≤ 10
Subtask #2 (80 points): Original Constraints
Example
Input:

2
9 2
110001111
4 1
1001


Output:

2
2

Explanation
Example case 1: The answer is 2 because we can change the string to: 110101011

Example case 2: If we don't change the input string at all, the answer will be 2. It is the best value we can achieve under the given conditions.

Author:	5★kingofnumbers
Tester:	6★xcwgf666
Editorial:	https://discuss.codechef.com/problems/SCHEDULE

DIFFICULTY:
EASY

PREREQUISITES:
Binary search

PROBLEM:
For a binary string AA, let's define a block as a substring of AA containing either only 11's or only 00's, so 111111 and 00 are blocks, while 1010 and 00100010 are not. Moreover, let a major block be a block of AA, such that no block in AA is longer that it and LL be the length of a major block of AA. Notice that there can be many major blocks, but all of them have the same length.

Then the problem can be reformulated as follow: for a given binary string AA of length NN and integer KK, we have to return the minimum LL (the length of a major block) that we can get by performing at most KK bit flips on AA.

For example, if A=11100A=11100 and K=1K=1, the best we can do is to either flip the first or the second bit to get for respectively 0110001100 and 1010010100. In both these strings, LL is 22, which is the best we can get in this case.

QUICK EXPLANATION:
First, check if getting L=1L=1 is possible. If yes the problem is solved, otherwise, perform a binary search on the result checking if getting L=ML=M is possible in linear time.

EXPLANATION:
First of all, let's take a closer look at the constraints. It is said that K≤106K≤106, but since also N≤106N≤106 and there is no point of flipping a single bit more than once, we can rewrite the constraint as K≤NK≤N.

Subtask 1
In the first subtask N≤10N≤10, so one can generate all possible strings we can get by performing at most KK flips on AA, and compute the smallest LL among them. This is possible because there are at most 2N2N such strings and computing LL for a single string takes O(N)O(N) time. Thus the overall time complexity of solving all test cases will be O(T⋅2N⋅N)O(T⋅2N⋅N), which is completely fine for these constraints and T≤11000T≤11000.

Subtask 2
In the second subtask we have N≤106N≤106, so the problem has to be solved in a clever way. The crucial observation is that for any LL and any block of AA with length MM, ⌈M/(L+1)⌉⌈M/(L+1)⌉ flips are necessary to convert that block into a substring without blocks of length greater than LL, and we can perform exactly that many flips to do that.

For example, if we have a block of length 55, 0000000000, and L=2L=2, we flip its bits with indices L+1,2⋅(L+1),3⋅(L+1)…L+1,2⋅(L+1),3⋅(L+1)…, so in this particular case, we flip only its third bit to get 0010000100. Similarly, if we have a block of length 66, 000000000000, and L=2L=2, we flip its third and sixth bits to get 001001001001.

Thus it looks like we can perform a binary search for the answer and for a fixed MM, check if we can transform all the blocks in AA into block of length at most XX using at most KK flips by just iterating over all blocks in AA and computing the sum of needed swaps for all of these blocks. Notice that binary search is correct here, because if it is not possible to use at most KK swaps to get AA with L=XL=X, then it is also not possible to use at most KK swaps to get AA with L<XL<X. This will result in O(N⋅logN)O(N⋅log⁡N) time complexity for a single test case, but since the sum of NN across all test cases is at most 106106, this will run fast enough. However, we are not finished yet, because there is a tricky case to handle.

Notice that when we divide AA into blocks, the blocks alternate in such a way that after a block consisting of 00's there is a block consisting of 11's, then one consisting of 00's again and so on. The observation we made says that for a block of length MM, ⌈M/(L+1)⌉⌈M/(L+1)⌉ flips are necessary and sufficient to convert this block into blocks of sizes at most LL. It is true for an isolated block, however, since in some cases we are forced to flip the first or the last bit of such block, that may ruin our solution because that bit can create another block with adjacent blocks.

Let's take a closer look where this situation can happen, so in what cases we are really forced to flip either the first of the last bit of a block? As mentioned above, for a block of length MM and a fixed LL, we can flip bits with indices L+1,2⋅(L+1),3⋅(L+1)…L+1,2⋅(L+1),3⋅(L+1)…. It follows that we are flipping its last bit if Mmod(L+1)=0Mmod(L+1)=0. However, if this happens and L>1L>1, we can always flip bits with indices L,2⋅L,3⋅L,…L,2⋅L,3⋅L,… and we avoid flipping the first and the last bits, which caused the problem. But what happens when L=1L=1? Well, then we cannot use that trick, however, this case is easy to handle: at the beginning, we can just check if AA can be transformed using at most KK flips to get L=1L=1. Notice that there are just 22 possible strings of given length with L=1L=1, either a sequence of alternating 00's and 11's starting with 00 or the same but starting with 11. If this is the case we are done. Otherwise, we use binary search described above searching for the answer in a range [2,N][2,N]. For implementation details, please refer to multiple solutions linked below.