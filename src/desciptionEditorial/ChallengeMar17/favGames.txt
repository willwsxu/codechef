Chef has a nice job. Actually he doesn't even remember what he is supposed to do there, because he just plays video-games all the time, exactly h hours every working day!

Recently he got bored of just randomly playing video-games and decided to complete all the levels of his favorite Game as fast as possible.

The Game consists of n levels numbered with integers from 1 to n. After completing every level, some small number of new levels is unlocked. The structure of the Game levels is a tree with the root in level 1, i.e. every level (except for 1) has a unique level that unlocks it and level 1 is the only level that is considered unlocked at the very beginning. Chef has completed his favorite Game lots of times, so he knows that he needs exactly ti hours to complete level i. Due to specifics of the Game every level should be completed entirely within one working day, i.e. Chef cannot start a level on Thursday, and finish it Friday morning.

Overall the game-play proceeds as follows:

There is a stack S that initially contains only the level 1
Chef pops the topmost level out of the stack. Let's call this level x
Chef spends tx hours to complete level x. Note that he doesn't want to stay at work longer than for h hours, so if there is not enough time left today Chef will complete level x the next working day morning.
After completing level x some mx new levels get unlocked
Chef places all the mx unlocked levels on the top of the stack S in an arbitrary order, i.e. he is free to choose any order he likes
If stack S is empty, the Game is considered completed, otherwise Chef goes back to the step 2
Can you help Chef figure out the minimum number of working days necessary to complete the Game?

Input
The first line of the input contains an integer T denoting the number of test cases.

For each test case, the first line of input contains two integers n and h.

The next line contains n space-separated integers ― t1, t2, ..., tn.

The following n lines describe the structure of Game's levels: the x-th of them contains an integer mx followed by mx integers ― the levels that get unlocked after completing level x.

Output
For each test case, output a single integer ― the minimum number of working days necessary to complete the Game.

Constraints
1 ≤ T ≤ 10
1 ≤ n ≤ 1000
1 ≤ ti ≤ h ≤ 24
0 ≤ mx ≤ 10
It is guaranteed that the structure of the Game levels is a tree, i.e. it is possible to unlock all n levels and every level (except for 1) has exactly one other level that unlocks it.
Subtasks
Subtask #1: n ≤ 9 (7 points)
Subtask #2: mx ≤ 2 (20 points)
Subtask #3: n ≤ 100; h ≤ 8 (27 points)
Subtask #4: Original constraints (46 points)
Example
Input:
2
5 24
13 24 22 12 16
1 3
0
2 2 5
0
1 4
10 8
1 4 3 1 7 3 2 2 4 4
3 2 5 10
2 3 4
0
0
1 6
3 7 8 9
0
0
0
0

Output:
5
4

Explanation
Example case 1: Chef has to complete every level during separate working days, and so to complete all 5 levels he needs 5 working days.

Example case 2: Chef will complete the Game if he will always push unlocked levels into stack starting with the largest indexed one and ending with the smallest indexed one. That is, after Chef completes level 1 he first pushes level 10 (S = [10]), then level 5 (S = [10, 5]) and then level 2 (S = [10, 5, 2]). So the second level Chef will play is 2.

Author:	7★alex_2oo8
Tester:	6★xcwgf666
Editorial:	https://discuss.codechef.com/problems/FAVGAME

DIFFICULTY:
Medium

PREREQUISITES:
Trees, dynamic programming

PROBLEM:
The goal of the problem is to complete a video Game in a few days as possible. The Game has n levels numbered 
from 1 to n and you can play it at most h≤24 hours per day. The i-th level takes ti≤h hours to complete. 
The levels are structured in a tree T. It means that the level 1 is the root of the tree and the only unlocked 
level available to play at the beginning. Every other level i has unique level, its parent in the tree denoted 
as parenti, such that completing level parenti unlocks level i making it available to play. The game is 
completed when all its levels are completed. Moreover, the process of completing the game looks as follows:

There is a stack S initially containing only the level 1
You pop the topmost level x out of the stack
You spends tx hours to complete level x and you must complete it during a single day, which means that 
if there are not enough hours to complete level x on the current day, you cannot start it on that day.
After completing level x some mx new levels get unlocked
You place all the mx unlocked levels on the top of the stack S in an arbitrary order
If stack S is empty, the Game is considered completed, otherwise you go back to the step 2
The task is to find the minimum number of days needed to complete the Game.

QUICK EXPLANATION:
Use dynamic programming to compute for each vertex v the minimum number of days needed to complete all levels 
in v's subtree when you start on day 1 in v and have already worked p hours on that day.

EXPLANATION:
First and major observation we can make is to notice that each valid play, i.e. the order in which levels of 
the game are unlocked, corresponds to DFS order on T. Thus, the problem is reduced to finding DFS order 
which yields the smallest cost of visiting all N nodes of T.

Subtask 1
In the first subtask, we have N≤9, which allows totally brute-force solution. Notice that there are no 
more than N! possible DFS orders of T, so one can generate all N! permutation of the nodes, take only the 
ones describing valid DFS orders, and for each such sequence, compute the number of days needed to 
complete the game unlocking levels in the order given by the sequence. The result is the minimum result 
among all such valid DFS sequences. The time complexity of this method for a single test case is (N!⋅N).

Subtasks 2, 3, 4
Approaches for subtasks 2, 3 and 4 are based on dynamic programming approach, so let's describe the idea first. 
Just to recall, notice that h≤24 and each node has at most 10 children. Both these constraints are very important here.

Let dpv,p be a pair (a,b) denoting that when we start processing v's subtree on the first day and have 
already worked p hours that day, then a is the minimum number of additional days, besides the first day, 
to complete the whole v's subtree and b is the minimum number of hours we have to work on the last day 
in such optimal solution. Now, by this definition, dp functions captures all information we need, 
and the result to the problem is the resulting number of days in dp1h, because 1 is the root of the tree 
and completing its subtree means that the whole game is completed, and its always not worse to work 
as many hours on the first day as possible.

Now, notice that for fixed v and p, the value of dpv,p can be easily computed when we only know the best 
order in which we should complete subtrees of children of v. More specifically, if we know such best order, 
then we first complete level v, because it has to be completed before any other levels in v's subtree, 
and then we solve the problem recursively for all v's children. Next, we just compute the value of dpv,p 
straight away by accumulating, in a deterministic way, values computed for v's children in such an order. 
Thus, the problem is reduced to just computing the best order of processing subtrees of v's children.

Subtask 2
In the second subtask, there is an additional constraint on the number of children of a node, 
and we know that each node has at most 2 children. This allows for a fixed node v to just check at most 
2!=2 orders of completing subtrees of v's children and assign the smallest result to dpv,p.

Subtask 3
In the third subtask, we have N≤100 and h≤8. These constraints allow to use the intended method 
for the original constraints but just implemented in not an optimal way. For example, one can capture 
additional, not necessary information in states of dp, resulting in higher complexity of the solution than 
the intended one.

Subtask 4
In the fourth subtask, we have the original constraints, and the only thing left to do is to show how 
for a fixed v and p, compute the best order of completing subtrees of v's children resulting in the smallest 
value of dpv,p. Just to recall, we know that v has at most 10 children, so there are at most 10! possible 
such orders, but, since this number is quite big, checking just any of them explicitly is unacceptable.

However, a quite common optimization can be used here. We can avoid iterating over all permutations of 
children and instead iterate over all subsets of them. For a fixed node v, let fmask,p be a pair (a,b)
 denoting that when we start processing v's subtree on the first day and have already worked p hours that day, 
then a is the minimum number of additional days, besides the first day, to complete level v and 
subtrees of v's children included in the mask, and b is the number of hours we have to work on the last day 
in such optimal solution. Then, set mask can be implemented as a binary number of length mv, where 1 at 
the i-th position in mask denotes that the i-th children is included into the set. Now, we can just iterate 
over all masks and extend a solution for a fixed mask to a masknew having one more subtree completed 
than mask. Then, the value of dpv,p is just the value of fmaskfull,p, where maskfull denotes a set of 
all children of v.

The overall time complexity of this method is O(N⋅h⋅2^10). For implementation details of this exact method 
please refer to setter solution.