Bear Limak has just gotten his hair cut. Looking in a mirror, he realized that his fur looks so-so just after a haircut. After some thinking, he stated that he looks good when his most recent haircut was between A and B days ago (inclusive). It's guaranteed that A ≥ 1, so Limak doesn't look good on a day of a haircut in particular (you can assume that he gets a haircut in the morning).

After his new realization, Limak decided to plan his haircuts. Today is the day 0, and he has just gotten a haircut. For each of the following days, starting from the day 1, he can decide whether to get a haircut or not. It's allowed to get a haircut many days in a row.

There will be N days that are important for Limak (because he's going to meet a girl he likes). The i-th of them is the day ti. Limak wants to look good on as many of those days as possible.

Please, find the maximum possible number of important days when Limak will look good.

Input
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.

The first line of each test case contains three integers N, A and B, denoting the number of important days and values describing when Limak looks good respectively.

The second line contains N distinct integers t1, t2, ..., tN, denoting important days. These values are sorted increasingly.

Output
For each test case, output a single line containing one integer — the maximum possible number of important days when Limak will look good.

Constraints
1 ≤ T ≤ 6
1 ≤ N ≤ 150,000
1 ≤ A ≤ B ≤ 109
1 ≤ ti ≤ 109
ti < ti+1
Subtasks
Subtask #1 (20 points): 1 ≤ N, ti, A, B ≤ 50
Subtask #2 (20 points): 1 ≤ N ≤ 1000
Subtask #3 (20 points): A = 1
Subtask #4 (40 points): Original constraints.
Example
Input:
6
5 4 8
2 3 6 8 9
8 6 12
8 9 12 13 15 17 18 25
8 6 12
8 9 12 13 15 17 18 24
5 50000123 100000123
700000123 710000123 770000123 780000123 790000123
22 6 20
3 9 12 22 24 25 34 46 47 51 53 62 64 66 68 73 79 92 93 95 96 98
3 1 1000
1 17 1000

Output:
3
6
5
5
20
3
Explanation
Test case 1. There are 5 important days. Since Limak had his hair cut on the day 0, he can just wait and he will look good on days 4 through 8 (during that time, the number of days from the most recent haircut will be between A and B). There are 2 important days (6 and 8) in that interval. There exists a strategy that allows Limak to look good on 3 important days. For example, he could get a new haircut on the day 1 — then he will look good on days 5 through 9, including 3 important days. It turns out that it's impossible that Limak would look good on 4 or more important days. So the answer is 3.

Test case 2. Limak should get a haircut on the day 6, to look good on days 12 through 18. Then he should get a haircut on the day 19, to look good on days 25 through 31. In total, he will look good on 6 important days: 12, 13, 15, 17, 18, 25.

Author:	6★errichto
Tester:	5★kingofnumbers
Editorial:	https://discuss.codechef.com/problems/HAIRCUT

DIFFICULTY:
Medium

PREREQUISITES:
Dynamic programming

PROBLEM:
For given NN special days t1<t2<…tNt1<t2<…tN, and integers A,BA,B, the goal is perform haircuts on some days, not necessarily special ones, in a way which maximize the number of special days titi, for which the most recently performed haircut before titi was performed at least AA days before titi and at most BB days before titi.

EXPLANATION:
Subtask 1
In the first subtask, we have N,ti,A,B≤50N,ti,A,B≤50. This allows us to solve the problem by examining all the possible days at which performing a haircut is reasonable. Notice that in other subtasks, values of titi can be huge, and thus we are not allowed there to iterate over all possible days.

The problem can be solved with dynamic programming approach. Let's define:

dpi:=solution for days with numbers j<i , so for days 0,1,…,i−1. Remember that we do not include day i here
dpi:=solution for days with numbers j<i , so for days 0,1,…,i−1. Remember that we do not include day i here
At the beginning we initialize dpidpi for all ii to 00.

Now, we can iterate over all days from 00 (remember that the haircut was initially performed at that day) to the maximum special day in the input, let's call this day MM.

Let's assume that we are at a fixed day ii. First of all, we can assign dpi:=max(dpi,dpi−1)dpi:=max(dpi,dpi−1) if i≥2i≥2. It means that the answer for the first i−2i−2 days can be considered as the answer for the first i−1i−1 days. Then, we can try to see what happens if a haircut is performed on day ii. Specifically, we are going to iterate over all days from i+Ai+A to min(i+B,M)min(i+B,M), so over all days affected by the haircut performed at day ii. Now, let's assume that we are at such affected day jj and let kk be the number of special days in a range [i+A,j[i+A,j]. Then, we can assign dpj+1:=max(dpj+1,dpi+k)dpj+1:=max(dpj+1,dpi+k), because a possible answer for the first jj days, so dpj+1dpj+1, can be obtained by taking the best answer for the first i−1i−1 days, performing a haircut on day ii, and finally adding all special days not greater than jj, which were affected by this haircut. Just notice that kk can be updated during the iteration over affected days, so it doesn't affect the complexity at all.

The final answer is the value dpM+1dpM+1. Dynamic programming approach helps us to compute the best possibility, capturing all necessary information in an efficient way. The total time complexity of this approach per one test case is O(N⋅(B−A))O(N⋅(B−A)), because MM can be at most O(N)O(N) and the length of a range [i+A,min(i+B,M)][i+A,min(i+B,M)] is bounded by B−AB−A. Since in this subtask we have 1≤A,B≤N1≤A,B≤N, the complexity can be written as O(N2)O(N2).